@using System.Security.Claims
@inject IFriendService _friends
@inject IHttpContextAccessor _context
@inject IRequestService _req
@inject IHttpContextAccessor _http
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject UserManager<ApplicationUser> _usr

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BamstiChat</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <NavLink class="content">
            <div class="container">
              <div class="row justify-content-center text-center">
                <div class="col-md-5">
                  <div class="dropdown custom-dropdown">
                    <a href="#" data-toggle="dropdown" class="dropdown-link" aria-haspopup="true" aria-expanded="false">
                      <span class="wrap-icon icon-notifications"></span>
                      <span class="number">@Requests.Count</span>              
                    </a>
                    <div class="dropdown-menu dropdown-menu-right" style="width:300px;" aria-labelledby="dropdownMenuButton">
                      <div class="title-wrap d-flex align-items-center">
                        <h3 class="title mb-0">Notifications</h3>
                      </div>
                      <div class="container">
                        @if (!string.IsNullOrWhiteSpace(username))
                        {
                            @foreach (var item in Requests)
                            {

                                <hr />
                                <div class="row">
                                    <div class="col">
                                        <!-- Message -->
                                        <strong>@item.Sender.UserName :</strong> sent you a @item.Type.Type Request
                                    </div>
                                    <div class="col">
                                        <!-- Action -->
                                        <div class="row">
                                            <button class="btn btn-success w-75" @onclick="() => AcceptRequest(item.Id)" >Accept</button>
                                        </div>
                                        <div class="row mt-1">
                                            <button class="btn btn-danger w-75" @onclick="() => DeclineRequest(item.Id)">Decline</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                      </div>
                        
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </NavLink>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="AllFriends">
                <span class="oi oi-people" aria-hidden="true"></span> All Friends
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="AddFriend">
                <span class="oi oi-plus" aria-hidden="true"></span> Add Friends
            </NavLink>
        </div>
        @foreach (var item in Friends)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="() => StartChatWithFriend(item.User.UserName)">
                    <span class="oi oi-person" aria-hidden="true"></span> @item.User.UserName
                </NavLink>
            </div>
        }
        @*<div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>*@
    </nav>
</div>

@code {
    List<Request> Requests = new();

    private async void AcceptRequest(int id)
    {
        await _req.AcceptRequestFromUserWithId(_http.HttpContext.User.Identity.Name, id);
    }

    private async void DeclineRequest(int id)
    {
        await _req.RejectRequestFromUserWithId(_http.HttpContext.User.Identity.Name, id);
    }



    private List<Friend> Friends = new();

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string username = "";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void StartChatWithFriend(string username)
    {
        navigationManager.NavigateTo($"/Chat/{username}");
    }

    protected override async Task OnInitializedAsync()
    {
        var tmp = _usr.Users.Include(x => x.Friends);

        if (Helpers.GetObjectFromJson<string>(_http.HttpContext.Session, "Username") != null || _http.HttpContext.User.Identity.Name != null)
        {
            // Authorized
            Helpers.SetObjectAsJson(_http.HttpContext.Session, "Username", _http.HttpContext.User.Identity.Name);

            username = _context.HttpContext.User.Identity.Name;
            var user = _http.HttpContext.User.Identity.Name;
            Requests = await _req.GetAllRequestsFromUser(user);
            Friends = await _friends.GetAllFriendsAsync(user);

            InvokeAsync(StateHasChanged);
        }else
        {
            // Not Authorized
            navigationManager.NavigateTo("/Identity/Account/Login");
        }
    }
}